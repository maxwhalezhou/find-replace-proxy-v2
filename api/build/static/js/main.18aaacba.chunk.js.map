{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["encodedBody","data","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStringFind","e","setState","stringFind","target","value","handleStringReplace","stringReplace","state","apiResponse","handleSetProxy","bind","assertThisInitialized","fetch","method","body","findString","replaceString","headers","Content-Type","then","res","json","response","status","alert","message","react_default","a","createElement","className","Card_default","style","margin","backgroundSize","backgroundImage","CardContent_default","Typography_default","variant","TextField_default","id","label","onChange","StringReplace","textAlign","Button_default","onClick","handleResetProxy","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.18aaacba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\n\n\n\nvar encodedBody = (data) => {\n  var formBody = [];\n  for (var property in data) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(data[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  return formBody.join('&')\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: '',\n      stringFind: '',\n      stringReplace: ''\n    };\n\n    this.handleSetProxy = this.handleSetProxy.bind(this);\n  }\n\n  handleStringFind = (e) => {\n    this.setState({\n      stringFind: e.target.value\n    })\n  }\n\n  handleStringReplace = (e) => {\n    this.setState({\n      stringReplace: e.target.value\n    })\n  }\n\n  /*\n  {\n    findString: \"string1\", \n    replaceString: \"string2\"\n  }\n  */\n  handleSetProxy() {\n    // console.log(\"find: \" + this.state.stringFind);\n    // console.log(\"replace: \" + this.state.stringReplace);\n    fetch('http://35.227.151.229:9000/setFindReplace', {\n      method: 'post',\n      body: encodedBody({\n        findString: this.state.stringFind,\n        replaceString: this.state.stringReplace\n      }),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(res => res.json()).then((response) => {\n      if (response.status === 'success') {\n        alert(response.message)\n      } else {\n        alert(response.message)\n      }\n    })\n  }\n\n  handleResetProxy() {\n    // console.log(\"find: \" + this.state.stringFind);\n    // console.log(\"replace: \" + this.state.stringReplace);\n    fetch('http://35.227.151.229:9000/resetFindReplace', {\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(res => res.json()).then((response) => {\n      if (response.status === 'success') {\n        alert(response.message)\n      } else {\n        alert(response.message)\n      }\n    })\n  }\n  // componentWillMount() {\n  //   this.callAPI();\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card style={{margin:'10px', backgroundSize:'480px 360px, contain', backgroundImage:'url(\"https://media.giphy.com/media/3oxHQk2aTC2bCYxoRi/giphy.gif\")'}}>\n        <CardContent>\n          <Typography variant=\"h3\" >\n            Find and Replace Proxy\n         </Typography>\n          <Typography variant=\"body1\">\n            Enter the value you would like to replace below. Then, hit 'Set Proxy' to initialize the proxy. If you would like to replace a different set of values, hit 'Reset' to reset the service and repeat the first step.\n         </Typography>\n          <div>\n            <TextField\n              id=\"string-find\"\n              label=\"Text to Replace\"\n              value={this.state.stringFind}\n              onChange={this.handleStringFind}\n              margin=\"normal\"\n            />\n          </div>\n\n          <div >\n            <TextField\n              id=\"string-replace\"\n              label=\"Replacement Text\"\n              value={this.state.StringReplace}\n              onChange={this.handleStringReplace}\n              margin=\"normal\"\n            />\n          </div>\n          </CardContent>\n          <div className=\"button-holder\" style={{textAlign: 'center'}}>\n            <div>\n              <Button onClick={this.handleSetProxy} variant=\"contained\" style={{ margin: '10px' }}>\n                Set Proxy\n        </Button>\n              <Button onClick={this.handleResetProxy} color=\"secondary\" variant=\"contained\" >\n                Reset\n        </Button>\n            </div>\n          </div>\n\n          </Card>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}